// ADD BUG
//

//
// addBug
//
// @return - a function signature that,
// when executed, will add a bug in TFS
qa_helper.addBug = new function() {
  //
  // promptCourseInformation
  //
  function promptCourseInformation() {
    var courseInfo = prompt("Hit Ctrl+V to paste course information here.");

    if (courseInfo) {
      courseInfo = parseCourseInformation(courseInfo);
    }

    return courseInfo;
  }

  //
  // parseCourseInformation
  //
  // @param text - the slide information that the user copied and pasted from
  // the slide that is bugged
  function parseCourseInformation(text) {
    var courseInfo = {
      slideInfo    : '',
      sectionTitle : ''
    };

    var splitText = text.split('---');

    courseInfo.slideInfo    = splitText[0].trim();
    courseInfo.sectionTitle = splitText[1].trim();

    return courseInfo;
  }

  //
  // parseComponents
  //
  // @param slideID - the identification number that is copied
  // and pasted from the help button inside of slides where
  // bugs are identified. e.g. AD12-104-Web01-6-0-00-10
  // 
  function parseComponents(slideID) {
    var components = {
      webNumber      : '',
      courseName     : '',
      courseNumber   : '',
      programCode    : '',
      programVersion : ''
    };

    var splitString = '';

    // e.g. AD
    components.programCode = slideID.match(/^\w{2}/i);
    splitString += components.programCode;
    console.log('program code: ' + components.programCode);

    // e.g. 12
    components.programVersion = slideID.split(splitString)[1].match(/^\d{2}/i);
    splitString += components.programVersion + '-';
    console.log('program version: ' + components.programVersion);

    // e.g. 104
    components.courseNumber = slideID.split(splitString)[1].match(/^\d{3}/i);
    splitString += components.courseNumber + '-Web';
    console.log('course number: ' + components.courseNumber);

    // e.g. Web01
    components.webNumber = slideID.split(splitString)[1].match(/^\d{2,}/i);
    console.log('web number: ' + components.webNumber);

    components = verifyComponents(components);

    return components;
  }

  //
  // verifyComponents
  //
  // @param components - an object generated by the parseComponents
  // function that contains all of the parsed information from the
  // slideID given by the user
  function verifyComponents(components) {
    var return_value = components;
    for (var i = 0; i < components.length; i++) {
      if (!components[i]) {
        return_value = null;
      }
    }
    return return_value;
  }

  //
  // addTag
  //
  // @param tag - a string representation of the tag to be added
  function addTag(tag) {
    var $input        = '';
    var $addButton    = $('.tag-box.tag-box-selectable');
    var pressEnterKey = $.Event('keydown', { keyCode : 13 });

    $addButton.click();
    $input = $('.tags-input.tag-box.ui-autocomplete-input');

    $input.val(tag);
    $input.trigger(pressEnterKey);
  }

  //
  // addTitle
  //
  // @param title - a string representation of the title to be added
  function addTitle(title) {
    var $titleInput = $('.dialog input[aria-label="Title"]');
    $titleInput.val(title + ' - ');
    $titleInput.focus();
  }

  var addBug = function() {
    var courseInfo   = promptCourseInformation();

    if (courseInfo) {
      var tagOne, tagTwo;
      var slideID      = courseInfo.slideInfo;
      var sectionTitle = courseInfo.sectionTitle;
      var components   = parseComponents(slideID);
    }

    // Do nothing if components are null; that means the
    // data provided was invalid
    if (!components) {
      alert('That data was invalid!');
    }
    else {


      //find all 'Content QA' divs
      var $content_qas = $('div[title="Content QA"]');

      //will hold the content qa div that we want
      var $correct_content_qa;

      //find the correct content qa
      for(var i = 0; i < $content_qas.length; i++) {

          var siblings_of_content_qa = $($content_qas[i]).parent().children();

          //get tags on the content qa row
          var tag_list_items = $(siblings_of_content_qa[siblings_of_content_qa.length - 1]).children().children().children().children();
          
          //check the tags to see if they match the slide title. If they match, save the correct div 
          for(var j = 0; j < tag_list_items.length; j++) {
              
              var title = $(tag_list_items[j]).attr('title');
              if(title && title === "Web" + components.webNumber + "-" + courseInfo.sectionTitle){
                  $correct_content_qa = $content_qas[i];
              }
          }
      }

      //if no content qa div was found
      if(typeof $correct_content_qa === 'undefined'){
          alert("Please open the 'Feature' you want to work in and try again.");
      }
      else{
          //click Content QA plus button to open "add bug" menu
          $($($correct_content_qa).parent().children()[0]).children().click();

          //click "add bug" in the menu to add bug
          $('ul>li>ul>li>span.text:contains("Bug")').click()
      }



      tagOne = components.programCode +
        components.programVersion     +
        '-'                           +
        components.courseNumber;

      tagTwo = 'Web' + components.webNumber + '-' + sectionTitle;

      addTag(tagOne);
      addTag(tagTwo);
      addTitle(slideID);
    }
  }

  return addBug;
}
